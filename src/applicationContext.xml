<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
       		http://www.springframework.org/schema/beans/spring-beans.xsd
       		http://www.springframework.org/schema/context
       		http://www.springframework.org/schema/context/spring-context.xsd
       		http://www.springframework.org/schema/aop
       		http://www.springframework.org/schema/aop/spring-aop.xsd
       		http://www.springframework.org/schema/tx
       		http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- 引入外部属性文件 -->
	<context:property-placeholder location="classpath:jdbc.properties"/>

	<!-- 配置连接池 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClass}"></property>
		<property name="jdbcUrl" value="${jdbc.url}"></property>
		<property name="user" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
	
	<!-- 配置hibernate的相关属性, 需要在dao中注入sessionFactory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<!-- 注入连接池 -->
		<property name="dataSource" ref="dataSource"></property>
		
		<!-- 配置hibernate的属性 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.SQLServerDialect</prop>			<!-- 数据库方言 -->
				<prop key="hibernate.show_sql">false</prop>			
				<prop key="hibernate.format_sql">true</prop>			
				<prop key="hibernate.hbm2ddl.auto">update</prop>			
			</props>
		</property>
		
		<!-- 加载hibernate中的映射文件 -->
		<property name="mappingResources">
			<list>
				<value>cn/muke/ssh/domain/T_News.hbm.xml</value>
			</list>
		</property>
	</bean>
	
	
	

	<!-- 配置action的类 
		spring 默认scope 是单例模式, 这样只会创建一个Action对象, 每次访问都是同一个Action对象，
		数据不安全, struts2 是要求 每次次访问 都对应不同的Actionscope="prototype" 
		可以保证 当有请求的时候 都创建一个Action对象-->
	<bean id="t_NewsAction" class="cn.muke.ssh.action.T_NewsAction" scope="prototype">
		<!-- action交给spring管理时, 必须手动注入service -->
		<property name="t_NewsService" ref="t_NewsService"></property>
	</bean>
	
	<!-- 配置业务层的类 -->
	<bean id="t_NewsService" class="cn.muke.ssh.service.T_NewsService">
		<property name="t_NewsDao" ref="t_NewsDao"></property>
	</bean>

	<!-- 配置dao的类 -->
	<bean id="t_NewsDao" class="cn.muke.ssh.dao.T_NewsDao">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<!-- 开启注解事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- <bean class="org.springframework.beans.factory.config.CustomScopeConfigurer">
        <property name="scopes">
            <map>
                <entry key="session">
                    <bean class="org.springframework.context.support.SimpleThreadScope"/>
                </entry>
            </map>
        </property>
    </bean>

    <bean id="testAction" class="org.apache.struts2.JUnitTestAction"/>
    <bean id="mySessionBean" class="org.apache.struts2.MySessionBean" scope="session" /> -->
</beans>